// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regen/divvy/v1/tx.proto

package divvy

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgEmptyResp struct {
}

func (m *MsgEmptyResp) Reset()         { *m = MsgEmptyResp{} }
func (m *MsgEmptyResp) String() string { return proto.CompactTextString(m) }
func (*MsgEmptyResp) ProtoMessage()    {}
func (*MsgEmptyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab1ab9b32c81971, []int{0}
}
func (m *MsgEmptyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEmptyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEmptyResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEmptyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEmptyResp.Merge(m, src)
}
func (m *MsgEmptyResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgEmptyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEmptyResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEmptyResp proto.InternalMessageInfo

// MsgCreateClass is the Msg/CreateClass request type.
type MsgCreateAllocator struct {
	// admin is the address of the account that creates the allocator and signs
	// the message
	Admin string    `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	Start time.Time `protobuf:"bytes,2,opt,name=start,proto3,stdtime" json:"start"`
	End   time.Time `protobuf:"bytes,3,opt,name=end,proto3,stdtime" json:"end"`
	// how often we do a distribution
	Interval time.Duration `protobuf:"bytes,4,opt,name=interval,proto3,stdduration" json:"interval"`
	// name of the allocator
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// url with metadata
	Url     string      `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Entries []Recipient `protobuf:"bytes,10,rep,name=entries,proto3" json:"entries"`
}

func (m *MsgCreateAllocator) Reset()         { *m = MsgCreateAllocator{} }
func (m *MsgCreateAllocator) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAllocator) ProtoMessage()    {}
func (*MsgCreateAllocator) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab1ab9b32c81971, []int{1}
}
func (m *MsgCreateAllocator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAllocator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAllocator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAllocator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAllocator.Merge(m, src)
}
func (m *MsgCreateAllocator) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAllocator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAllocator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAllocator proto.InternalMessageInfo

func (m *MsgCreateAllocator) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgCreateAllocator) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *MsgCreateAllocator) GetEnd() time.Time {
	if m != nil {
		return m.End
	}
	return time.Time{}
}

func (m *MsgCreateAllocator) GetInterval() time.Duration {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *MsgCreateAllocator) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateAllocator) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *MsgCreateAllocator) GetEntries() []Recipient {
	if m != nil {
		return m.Entries
	}
	return nil
}

// MsgCreateClassResponse is the Msg/CreateClass response type.
type MsgCreateAllocatorResp struct {
	// id is the unique ID of the newly created allocator.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateAllocatorResp) Reset()         { *m = MsgCreateAllocatorResp{} }
func (m *MsgCreateAllocatorResp) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAllocatorResp) ProtoMessage()    {}
func (*MsgCreateAllocatorResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab1ab9b32c81971, []int{2}
}
func (m *MsgCreateAllocatorResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAllocatorResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAllocatorResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAllocatorResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAllocatorResp.Merge(m, src)
}
func (m *MsgCreateAllocatorResp) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAllocatorResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAllocatorResp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAllocatorResp proto.InternalMessageInfo

func (m *MsgCreateAllocatorResp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MsgUpdateAllocatorSetting struct {
	// sender must the the Allocator admin
	Sender string    `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Start  time.Time `protobuf:"bytes,2,opt,name=start,proto3,stdtime" json:"start"`
	End    time.Time `protobuf:"bytes,3,opt,name=end,proto3,stdtime" json:"end"`
	// how often we do a distribution, min 1s
	Interval time.Duration `protobuf:"bytes,4,opt,name=interval,proto3,stdduration" json:"interval"`
	// name of the allocator
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// url with metadata
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *MsgUpdateAllocatorSetting) Reset()         { *m = MsgUpdateAllocatorSetting{} }
func (m *MsgUpdateAllocatorSetting) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAllocatorSetting) ProtoMessage()    {}
func (*MsgUpdateAllocatorSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab1ab9b32c81971, []int{3}
}
func (m *MsgUpdateAllocatorSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAllocatorSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAllocatorSetting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAllocatorSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAllocatorSetting.Merge(m, src)
}
func (m *MsgUpdateAllocatorSetting) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAllocatorSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAllocatorSetting.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAllocatorSetting proto.InternalMessageInfo

func (m *MsgUpdateAllocatorSetting) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateAllocatorSetting) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *MsgUpdateAllocatorSetting) GetEnd() time.Time {
	if m != nil {
		return m.End
	}
	return time.Time{}
}

func (m *MsgUpdateAllocatorSetting) GetInterval() time.Duration {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *MsgUpdateAllocatorSetting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateAllocatorSetting) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type MsgSetAllocationMap struct {
	// sender must the the Allocator admin
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// New allocator mapping.
	// Invariants:
	// * sum of shares in entires must equal to 100% (1mln)
	Entries []Recipient `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries"`
}

func (m *MsgSetAllocationMap) Reset()         { *m = MsgSetAllocationMap{} }
func (m *MsgSetAllocationMap) String() string { return proto.CompactTextString(m) }
func (*MsgSetAllocationMap) ProtoMessage()    {}
func (*MsgSetAllocationMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab1ab9b32c81971, []int{4}
}
func (m *MsgSetAllocationMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetAllocationMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetAllocationMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetAllocationMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetAllocationMap.Merge(m, src)
}
func (m *MsgSetAllocationMap) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetAllocationMap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetAllocationMap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetAllocationMap proto.InternalMessageInfo

func (m *MsgSetAllocationMap) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSetAllocationMap) GetEntries() []Recipient {
	if m != nil {
		return m.Entries
	}
	return nil
}

type MsgRemoveAllocator struct {
	// sender must the the Allocator admin
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgRemoveAllocator) Reset()         { *m = MsgRemoveAllocator{} }
func (m *MsgRemoveAllocator) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAllocator) ProtoMessage()    {}
func (*MsgRemoveAllocator) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab1ab9b32c81971, []int{5}
}
func (m *MsgRemoveAllocator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAllocator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAllocator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAllocator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAllocator.Merge(m, src)
}
func (m *MsgRemoveAllocator) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAllocator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAllocator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAllocator proto.InternalMessageInfo

func (m *MsgRemoveAllocator) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgCreateSlowReleaseStream struct {
	// signer and creator of the stream
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// when the stream starts
	Start time.Time `protobuf:"bytes,2,opt,name=start,proto3,stdtime" json:"start"`
	// how often we do a distribution
	Interval time.Duration `protobuf:"bytes,3,opt,name=interval,proto3,stdduration" json:"interval"`
	// Allocator address
	Destination string `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	// Types that are valid to be assigned to Strategy:
	//	*MsgCreateSlowReleaseStream_FixedAmount
	Strategy isMsgCreateSlowReleaseStream_Strategy `protobuf_oneof:"strategy"`
}

func (m *MsgCreateSlowReleaseStream) Reset()         { *m = MsgCreateSlowReleaseStream{} }
func (m *MsgCreateSlowReleaseStream) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSlowReleaseStream) ProtoMessage()    {}
func (*MsgCreateSlowReleaseStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab1ab9b32c81971, []int{6}
}
func (m *MsgCreateSlowReleaseStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSlowReleaseStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSlowReleaseStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSlowReleaseStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSlowReleaseStream.Merge(m, src)
}
func (m *MsgCreateSlowReleaseStream) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSlowReleaseStream) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSlowReleaseStream.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSlowReleaseStream proto.InternalMessageInfo

type isMsgCreateSlowReleaseStream_Strategy interface {
	isMsgCreateSlowReleaseStream_Strategy()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgCreateSlowReleaseStream_FixedAmount struct {
	FixedAmount string `protobuf:"bytes,10,opt,name=fixed_amount,json=fixedAmount,proto3,oneof" json:"fixed_amount,omitempty"`
}

func (*MsgCreateSlowReleaseStream_FixedAmount) isMsgCreateSlowReleaseStream_Strategy() {}

func (m *MsgCreateSlowReleaseStream) GetStrategy() isMsgCreateSlowReleaseStream_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (m *MsgCreateSlowReleaseStream) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgCreateSlowReleaseStream) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *MsgCreateSlowReleaseStream) GetInterval() time.Duration {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *MsgCreateSlowReleaseStream) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *MsgCreateSlowReleaseStream) GetFixedAmount() string {
	if x, ok := m.GetStrategy().(*MsgCreateSlowReleaseStream_FixedAmount); ok {
		return x.FixedAmount
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgCreateSlowReleaseStream) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgCreateSlowReleaseStream_FixedAmount)(nil),
	}
}

type MsgPauseSlowReleaseStream struct {
	// sender must the the Stream admin
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// the pause value to set
	Paused bool `protobuf:"varint,2,opt,name=paused,proto3" json:"paused,omitempty"`
}

func (m *MsgPauseSlowReleaseStream) Reset()         { *m = MsgPauseSlowReleaseStream{} }
func (m *MsgPauseSlowReleaseStream) String() string { return proto.CompactTextString(m) }
func (*MsgPauseSlowReleaseStream) ProtoMessage()    {}
func (*MsgPauseSlowReleaseStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab1ab9b32c81971, []int{7}
}
func (m *MsgPauseSlowReleaseStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseSlowReleaseStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseSlowReleaseStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseSlowReleaseStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseSlowReleaseStream.Merge(m, src)
}
func (m *MsgPauseSlowReleaseStream) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseSlowReleaseStream) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseSlowReleaseStream.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseSlowReleaseStream proto.InternalMessageInfo

func (m *MsgPauseSlowReleaseStream) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgPauseSlowReleaseStream) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

type MsgEditSlowReleaseStream struct {
	// sender must the the Stream admin
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// when the stream starts
	Start time.Time `protobuf:"bytes,2,opt,name=start,proto3,stdtime" json:"start"`
	// how often we do a distribution
	Interval time.Duration `protobuf:"bytes,3,opt,name=interval,proto3,stdduration" json:"interval"`
	// Allocator address
	Destination string `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	// Types that are valid to be assigned to Strategy:
	//	*MsgEditSlowReleaseStream_FixedAmount
	Strategy isMsgEditSlowReleaseStream_Strategy `protobuf_oneof:"strategy"`
}

func (m *MsgEditSlowReleaseStream) Reset()         { *m = MsgEditSlowReleaseStream{} }
func (m *MsgEditSlowReleaseStream) String() string { return proto.CompactTextString(m) }
func (*MsgEditSlowReleaseStream) ProtoMessage()    {}
func (*MsgEditSlowReleaseStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_bab1ab9b32c81971, []int{8}
}
func (m *MsgEditSlowReleaseStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditSlowReleaseStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditSlowReleaseStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditSlowReleaseStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditSlowReleaseStream.Merge(m, src)
}
func (m *MsgEditSlowReleaseStream) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditSlowReleaseStream) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditSlowReleaseStream.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditSlowReleaseStream proto.InternalMessageInfo

type isMsgEditSlowReleaseStream_Strategy interface {
	isMsgEditSlowReleaseStream_Strategy()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgEditSlowReleaseStream_FixedAmount struct {
	FixedAmount string `protobuf:"bytes,10,opt,name=fixed_amount,json=fixedAmount,proto3,oneof" json:"fixed_amount,omitempty"`
}

func (*MsgEditSlowReleaseStream_FixedAmount) isMsgEditSlowReleaseStream_Strategy() {}

func (m *MsgEditSlowReleaseStream) GetStrategy() isMsgEditSlowReleaseStream_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (m *MsgEditSlowReleaseStream) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgEditSlowReleaseStream) GetStart() time.Time {
	if m != nil {
		return m.Start
	}
	return time.Time{}
}

func (m *MsgEditSlowReleaseStream) GetInterval() time.Duration {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *MsgEditSlowReleaseStream) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *MsgEditSlowReleaseStream) GetFixedAmount() string {
	if x, ok := m.GetStrategy().(*MsgEditSlowReleaseStream_FixedAmount); ok {
		return x.FixedAmount
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgEditSlowReleaseStream) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgEditSlowReleaseStream_FixedAmount)(nil),
	}
}

func init() {
	proto.RegisterType((*MsgEmptyResp)(nil), "regen.ecocredit.v1alpha2.MsgEmptyResp")
	proto.RegisterType((*MsgCreateAllocator)(nil), "regen.ecocredit.v1alpha2.MsgCreateAllocator")
	proto.RegisterType((*MsgCreateAllocatorResp)(nil), "regen.ecocredit.v1alpha2.MsgCreateAllocatorResp")
	proto.RegisterType((*MsgUpdateAllocatorSetting)(nil), "regen.ecocredit.v1alpha2.MsgUpdateAllocatorSetting")
	proto.RegisterType((*MsgSetAllocationMap)(nil), "regen.ecocredit.v1alpha2.MsgSetAllocationMap")
	proto.RegisterType((*MsgRemoveAllocator)(nil), "regen.ecocredit.v1alpha2.MsgRemoveAllocator")
	proto.RegisterType((*MsgCreateSlowReleaseStream)(nil), "regen.ecocredit.v1alpha2.MsgCreateSlowReleaseStream")
	proto.RegisterType((*MsgPauseSlowReleaseStream)(nil), "regen.ecocredit.v1alpha2.MsgPauseSlowReleaseStream")
	proto.RegisterType((*MsgEditSlowReleaseStream)(nil), "regen.ecocredit.v1alpha2.MsgEditSlowReleaseStream")
}

func init() { proto.RegisterFile("regen/divvy/v1/tx.proto", fileDescriptor_bab1ab9b32c81971) }

var fileDescriptor_bab1ab9b32c81971 = []byte{
	// 721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x96, 0xcf, 0x4e, 0xdb, 0x4e,
	0x10, 0xc7, 0xf3, 0x07, 0xf2, 0x0b, 0x13, 0x04, 0xc8, 0x3f, 0x1a, 0x4c, 0x0e, 0x26, 0x0a, 0x52,
	0x95, 0x03, 0xd8, 0x4d, 0xa8, 0x7a, 0xe8, 0xa5, 0x22, 0xb4, 0x6a, 0xa5, 0x2a, 0x52, 0xe5, 0xb4,
	0x97, 0x5e, 0xaa, 0x4d, 0x3c, 0x98, 0x55, 0x6d, 0xaf, 0xd9, 0x5d, 0x07, 0x72, 0xed, 0x03, 0x54,
	0x1c, 0xfb, 0x1c, 0x7d, 0x0a, 0xd4, 0x13, 0xc7, 0x9e, 0xda, 0x0a, 0x5e, 0xa4, 0xf2, 0xc6, 0x41,
	0x51, 0x12, 0x47, 0x01, 0xa9, 0x17, 0x6e, 0xbb, 0xb3, 0xf3, 0x99, 0x59, 0x7f, 0x67, 0x67, 0x12,
	0xd8, 0xe2, 0xe8, 0x62, 0x60, 0x39, 0xb4, 0xdf, 0x1f, 0x58, 0xfd, 0x86, 0x25, 0xcf, 0xcd, 0x90,
	0x33, 0xc9, 0x34, 0x5d, 0x1d, 0x98, 0xd8, 0x63, 0x3d, 0x8e, 0x0e, 0x95, 0x66, 0xbf, 0x41, 0xbc,
	0xf0, 0x84, 0x34, 0x2b, 0x46, 0x8f, 0x09, 0x9f, 0x09, 0xab, 0x4b, 0x04, 0x5a, 0xfd, 0x46, 0x17,
	0x25, 0x69, 0x58, 0x3d, 0x46, 0x83, 0x21, 0x59, 0xd9, 0x74, 0x99, 0xcb, 0xd4, 0xd2, 0x8a, 0x57,
	0x89, 0xd5, 0x70, 0x19, 0x73, 0x3d, 0xb4, 0xd4, 0xae, 0x1b, 0x1d, 0x5b, 0x4e, 0xc4, 0x89, 0xa4,
	0x6c, 0x44, 0xed, 0x4c, 0x9e, 0x4b, 0xea, 0xa3, 0x90, 0xc4, 0x0f, 0x13, 0x87, 0xca, 0xe4, 0x4d,
	0x07, 0x21, 0x8a, 0xe1, 0x59, 0x6d, 0x0d, 0x56, 0xdb, 0xc2, 0x7d, 0xe5, 0x87, 0x72, 0x60, 0xa3,
	0x08, 0x6b, 0x3f, 0x72, 0xa0, 0xb5, 0x85, 0x7b, 0xc4, 0x91, 0x48, 0x3c, 0xf4, 0x3c, 0xd6, 0x23,
	0x92, 0x71, 0x6d, 0x13, 0x96, 0x89, 0xe3, 0xd3, 0x40, 0xcf, 0x56, 0xb3, 0xf5, 0x15, 0x7b, 0xb8,
	0xd1, 0x9e, 0xc3, 0xb2, 0x90, 0x84, 0x4b, 0x3d, 0x57, 0xcd, 0xd6, 0x4b, 0xcd, 0x8a, 0x39, 0xbc,
	0x89, 0x39, 0xba, 0x89, 0xf9, 0x7e, 0x74, 0x93, 0x56, 0xf1, 0xf2, 0xd7, 0x4e, 0xe6, 0xe2, 0xf7,
	0x4e, 0xd6, 0x1e, 0x22, 0xda, 0x33, 0xc8, 0x63, 0xe0, 0xe8, 0xf9, 0x3b, 0x90, 0x31, 0xa0, 0xbd,
	0x80, 0x22, 0x0d, 0x24, 0xf2, 0x3e, 0xf1, 0xf4, 0x25, 0x05, 0x6f, 0x4f, 0xc1, 0x2f, 0x13, 0x81,
	0x86, 0xec, 0xb7, 0x98, 0xbd, 0x85, 0x34, 0x0d, 0x96, 0x02, 0xe2, 0xa3, 0xbe, 0xac, 0xbe, 0x44,
	0xad, 0xb5, 0x0d, 0xc8, 0x47, 0xdc, 0xd3, 0x0b, 0xca, 0x14, 0x2f, 0xb5, 0x23, 0xf8, 0x0f, 0x03,
	0xc9, 0x29, 0x0a, 0x1d, 0xaa, 0xf9, 0x7a, 0xa9, 0xb9, 0x6b, 0xa6, 0x95, 0xd5, 0xb4, 0xb1, 0x47,
	0x43, 0x8a, 0x81, 0x6c, 0x2d, 0xc5, 0xf9, 0xec, 0x11, 0x59, 0xab, 0x43, 0x79, 0x5a, 0xcb, 0x58,
	0x66, 0x6d, 0x0d, 0x72, 0xd4, 0x49, 0xc4, 0xcc, 0x51, 0xa7, 0xf6, 0x35, 0x07, 0xdb, 0x6d, 0xe1,
	0x7e, 0x08, 0x9d, 0x71, 0xd7, 0x0e, 0x4a, 0x49, 0x03, 0x57, 0x2b, 0x43, 0x41, 0x60, 0xe0, 0x20,
	0x4f, 0x88, 0x64, 0xf7, 0x80, 0xf5, 0xaf, 0x71, 0xf8, 0xbf, 0x2d, 0xdc, 0x0e, 0xca, 0x44, 0x0c,
	0xca, 0x82, 0x36, 0x09, 0x53, 0x95, 0x18, 0x2b, 0x57, 0xee, 0xde, 0xe5, 0xda, 0x53, 0x4f, 0xdf,
	0x46, 0x9f, 0xf5, 0xc7, 0x9e, 0x7e, 0x4a, 0xca, 0xda, 0x97, 0x1c, 0x54, 0x6e, 0xab, 0xdb, 0xf1,
	0xd8, 0x99, 0x8d, 0x1e, 0x12, 0x81, 0x1d, 0xc9, 0x91, 0xf8, 0xff, 0xa0, 0x63, 0xc6, 0x95, 0xcf,
	0xdf, 0x47, 0xf9, 0x2a, 0x94, 0x1c, 0x14, 0x92, 0x06, 0xca, 0x45, 0x55, 0x6f, 0xc5, 0x1e, 0x37,
	0x69, 0xbb, 0xb0, 0x7a, 0x4c, 0xcf, 0xd1, 0xf9, 0x44, 0x7c, 0x16, 0x05, 0x52, 0x87, 0xd8, 0xe5,
	0x4d, 0xc6, 0x2e, 0x29, 0xeb, 0xa1, 0x32, 0xb6, 0x00, 0x8a, 0x42, 0x72, 0x22, 0xd1, 0x1d, 0xd4,
	0xde, 0xaa, 0x67, 0xfb, 0x8e, 0x44, 0x62, 0x86, 0x04, 0x69, 0xc5, 0x2a, 0x43, 0x21, 0x8c, 0x09,
	0x47, 0xa9, 0x50, 0xb4, 0x93, 0x5d, 0xac, 0xa8, 0x1e, 0x0f, 0x23, 0x87, 0xca, 0xc5, 0x83, 0x3d,
	0x30, 0x45, 0x9b, 0xdf, 0x0b, 0x90, 0x6f, 0x0b, 0x57, 0x3b, 0x85, 0xf5, 0xc9, 0x21, 0xbc, 0x97,
	0xfe, 0xa6, 0xa7, 0xc7, 0x4c, 0xe5, 0xc9, 0x5d, 0xbc, 0xd5, 0x50, 0x8a, 0xa0, 0x9c, 0x32, 0x80,
	0x0e, 0xe6, 0xc6, 0x9a, 0x0d, 0x55, 0x1e, 0xcf, 0x85, 0x6e, 0x7f, 0x72, 0x34, 0x0a, 0x1b, 0x53,
	0x7d, 0xbe, 0x3f, 0x97, 0x9d, 0x74, 0x5f, 0x38, 0xd5, 0x29, 0xac, 0x4f, 0xb6, 0xf7, 0x7c, 0x51,
	0x27, 0xbc, 0xef, 0x21, 0xea, 0x19, 0x6c, 0xa5, 0x8d, 0x88, 0xa7, 0x0b, 0x04, 0x9b, 0xa2, 0x16,
	0xfe, 0xd6, 0x08, 0xca, 0x29, 0x7d, 0x39, 0xbf, 0x9a, 0xb3, 0xa1, 0x85, 0xd3, 0x0a, 0x78, 0x34,
	0xbb, 0x81, 0x9b, 0xf3, 0x03, 0xcc, 0x62, 0x16, 0x4d, 0xda, 0x7a, 0x7d, 0x79, 0x6d, 0x64, 0xaf,
	0xae, 0x8d, 0xec, 0x9f, 0x6b, 0x23, 0x7b, 0x71, 0x63, 0x64, 0xae, 0x6e, 0x8c, 0xcc, 0xcf, 0x1b,
	0x23, 0xf3, 0x71, 0xdf, 0xa5, 0xf2, 0x24, 0xea, 0x9a, 0x3d, 0xe6, 0x5b, 0x2a, 0xd6, 0x7e, 0x80,
	0xf2, 0x8c, 0xf1, 0xcf, 0xc9, 0xce, 0x43, 0xc7, 0x45, 0x6e, 0x9d, 0x0f, 0xff, 0x1d, 0x75, 0x0b,
	0xaa, 0xef, 0x0f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x95, 0x31, 0x0e, 0x50, 0xdd, 0x09, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Allocator is a distribution engine, which distributes everything which is
	// comming in configurable interval periods to registered entries. Each
	// allocator has only one owner. Ideally this can be managed by a group
	// module.
	CreateAllocator(ctx context.Context, in *MsgCreateAllocator, opts ...grpc.CallOption) (*MsgCreateAllocatorResp, error)
	// Updates all allocator settings except admin and recipient map.
	UpdateAllocatorSetting(ctx context.Context, in *MsgUpdateAllocatorSetting, opts ...grpc.CallOption) (*MsgEmptyResp, error)
	// Allocator owner can update the recipient list by setting a new
	// allocation map.
	SetAllocationMap(ctx context.Context, in *MsgSetAllocationMap, opts ...grpc.CallOption) (*MsgEmptyResp, error)
	// Removes allocator and disables all streamers!
	RemoveAllocator(ctx context.Context, in *MsgRemoveAllocator, opts ...grpc.CallOption) (*MsgCreateAllocatorResp, error)
	// Creates a new stream to feed an address
	// User creates a stream. Parameters:
	// * % of total amount to be streamed to allocator every second.
	// * destination address where the stream will go (ideally allocator)
	CreateSlowReleaseStream(ctx context.Context, in *MsgCreateSlowReleaseStream, opts ...grpc.CallOption) (*MsgEmptyResp, error)
	PauseSlowReleaseStream(ctx context.Context, in *MsgPauseSlowReleaseStream, opts ...grpc.CallOption) (*MsgEmptyResp, error)
	EditSlowReleaseStream(ctx context.Context, in *MsgEditSlowReleaseStream, opts ...grpc.CallOption) (*MsgEmptyResp, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateAllocator(ctx context.Context, in *MsgCreateAllocator, opts ...grpc.CallOption) (*MsgCreateAllocatorResp, error) {
	out := new(MsgCreateAllocatorResp)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.v1alpha2.Msg/CreateAllocator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAllocatorSetting(ctx context.Context, in *MsgUpdateAllocatorSetting, opts ...grpc.CallOption) (*MsgEmptyResp, error) {
	out := new(MsgEmptyResp)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.v1alpha2.Msg/UpdateAllocatorSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetAllocationMap(ctx context.Context, in *MsgSetAllocationMap, opts ...grpc.CallOption) (*MsgEmptyResp, error) {
	out := new(MsgEmptyResp)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.v1alpha2.Msg/SetAllocationMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAllocator(ctx context.Context, in *MsgRemoveAllocator, opts ...grpc.CallOption) (*MsgCreateAllocatorResp, error) {
	out := new(MsgCreateAllocatorResp)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.v1alpha2.Msg/RemoveAllocator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSlowReleaseStream(ctx context.Context, in *MsgCreateSlowReleaseStream, opts ...grpc.CallOption) (*MsgEmptyResp, error) {
	out := new(MsgEmptyResp)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.v1alpha2.Msg/CreateSlowReleaseStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseSlowReleaseStream(ctx context.Context, in *MsgPauseSlowReleaseStream, opts ...grpc.CallOption) (*MsgEmptyResp, error) {
	out := new(MsgEmptyResp)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.v1alpha2.Msg/PauseSlowReleaseStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditSlowReleaseStream(ctx context.Context, in *MsgEditSlowReleaseStream, opts ...grpc.CallOption) (*MsgEmptyResp, error) {
	out := new(MsgEmptyResp)
	err := c.cc.Invoke(ctx, "/regen.ecocredit.v1alpha2.Msg/EditSlowReleaseStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Allocator is a distribution engine, which distributes everything which is
	// comming in configurable interval periods to registered entries. Each
	// allocator has only one owner. Ideally this can be managed by a group
	// module.
	CreateAllocator(context.Context, *MsgCreateAllocator) (*MsgCreateAllocatorResp, error)
	// Updates all allocator settings except admin and recipient map.
	UpdateAllocatorSetting(context.Context, *MsgUpdateAllocatorSetting) (*MsgEmptyResp, error)
	// Allocator owner can update the recipient list by setting a new
	// allocation map.
	SetAllocationMap(context.Context, *MsgSetAllocationMap) (*MsgEmptyResp, error)
	// Removes allocator and disables all streamers!
	RemoveAllocator(context.Context, *MsgRemoveAllocator) (*MsgCreateAllocatorResp, error)
	// Creates a new stream to feed an address
	// User creates a stream. Parameters:
	// * % of total amount to be streamed to allocator every second.
	// * destination address where the stream will go (ideally allocator)
	CreateSlowReleaseStream(context.Context, *MsgCreateSlowReleaseStream) (*MsgEmptyResp, error)
	PauseSlowReleaseStream(context.Context, *MsgPauseSlowReleaseStream) (*MsgEmptyResp, error)
	EditSlowReleaseStream(context.Context, *MsgEditSlowReleaseStream) (*MsgEmptyResp, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateAllocator(ctx context.Context, req *MsgCreateAllocator) (*MsgCreateAllocatorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllocator not implemented")
}
func (*UnimplementedMsgServer) UpdateAllocatorSetting(ctx context.Context, req *MsgUpdateAllocatorSetting) (*MsgEmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllocatorSetting not implemented")
}
func (*UnimplementedMsgServer) SetAllocationMap(ctx context.Context, req *MsgSetAllocationMap) (*MsgEmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAllocationMap not implemented")
}
func (*UnimplementedMsgServer) RemoveAllocator(ctx context.Context, req *MsgRemoveAllocator) (*MsgCreateAllocatorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllocator not implemented")
}
func (*UnimplementedMsgServer) CreateSlowReleaseStream(ctx context.Context, req *MsgCreateSlowReleaseStream) (*MsgEmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlowReleaseStream not implemented")
}
func (*UnimplementedMsgServer) PauseSlowReleaseStream(ctx context.Context, req *MsgPauseSlowReleaseStream) (*MsgEmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSlowReleaseStream not implemented")
}
func (*UnimplementedMsgServer) EditSlowReleaseStream(ctx context.Context, req *MsgEditSlowReleaseStream) (*MsgEmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSlowReleaseStream not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateAllocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAllocator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAllocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.v1alpha2.Msg/CreateAllocator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAllocator(ctx, req.(*MsgCreateAllocator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAllocatorSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAllocatorSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAllocatorSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.v1alpha2.Msg/UpdateAllocatorSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAllocatorSetting(ctx, req.(*MsgUpdateAllocatorSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetAllocationMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetAllocationMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetAllocationMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.v1alpha2.Msg/SetAllocationMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetAllocationMap(ctx, req.(*MsgSetAllocationMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAllocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAllocator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAllocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.v1alpha2.Msg/RemoveAllocator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAllocator(ctx, req.(*MsgRemoveAllocator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSlowReleaseStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSlowReleaseStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSlowReleaseStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.v1alpha2.Msg/CreateSlowReleaseStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSlowReleaseStream(ctx, req.(*MsgCreateSlowReleaseStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseSlowReleaseStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseSlowReleaseStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseSlowReleaseStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.v1alpha2.Msg/PauseSlowReleaseStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseSlowReleaseStream(ctx, req.(*MsgPauseSlowReleaseStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditSlowReleaseStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditSlowReleaseStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditSlowReleaseStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/regen.ecocredit.v1alpha2.Msg/EditSlowReleaseStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditSlowReleaseStream(ctx, req.(*MsgEditSlowReleaseStream))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "regen.ecocredit.v1alpha2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAllocator",
			Handler:    _Msg_CreateAllocator_Handler,
		},
		{
			MethodName: "UpdateAllocatorSetting",
			Handler:    _Msg_UpdateAllocatorSetting_Handler,
		},
		{
			MethodName: "SetAllocationMap",
			Handler:    _Msg_SetAllocationMap_Handler,
		},
		{
			MethodName: "RemoveAllocator",
			Handler:    _Msg_RemoveAllocator_Handler,
		},
		{
			MethodName: "CreateSlowReleaseStream",
			Handler:    _Msg_CreateSlowReleaseStream_Handler,
		},
		{
			MethodName: "PauseSlowReleaseStream",
			Handler:    _Msg_PauseSlowReleaseStream_Handler,
		},
		{
			MethodName: "EditSlowReleaseStream",
			Handler:    _Msg_EditSlowReleaseStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regen/divvy/v1/tx.proto",
}

func (m *MsgEmptyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEmptyResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEmptyResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateAllocator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAllocator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAllocator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Interval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Interval):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.End, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.End):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTx(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Start):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTx(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x12
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAllocatorResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAllocatorResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAllocatorResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAllocatorSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAllocatorSetting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAllocatorSetting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	n4, err4 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Interval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Interval):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTx(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.End, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.End):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintTx(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x1a
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Start):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintTx(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetAllocationMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetAllocationMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetAllocationMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAllocator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAllocator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAllocator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSlowReleaseStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSlowReleaseStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSlowReleaseStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Strategy != nil {
		{
			size := m.Strategy.Size()
			i -= size
			if _, err := m.Strategy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x22
	}
	n7, err7 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Interval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Interval):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintTx(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x1a
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Start):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintTx(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x12
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSlowReleaseStream_FixedAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSlowReleaseStream_FixedAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.FixedAmount)
	copy(dAtA[i:], m.FixedAmount)
	i = encodeVarintTx(dAtA, i, uint64(len(m.FixedAmount)))
	i--
	dAtA[i] = 0x52
	return len(dAtA) - i, nil
}
func (m *MsgPauseSlowReleaseStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseSlowReleaseStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseSlowReleaseStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditSlowReleaseStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditSlowReleaseStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditSlowReleaseStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Strategy != nil {
		{
			size := m.Strategy.Size()
			i -= size
			if _, err := m.Strategy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x22
	}
	n9, err9 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Interval, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Interval):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintTx(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x1a
	n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Start, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Start):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintTx(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditSlowReleaseStream_FixedAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditSlowReleaseStream_FixedAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.FixedAmount)
	copy(dAtA[i:], m.FixedAmount)
	i = encodeVarintTx(dAtA, i, uint64(len(m.FixedAmount)))
	i--
	dAtA[i] = 0x52
	return len(dAtA) - i, nil
}
func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgEmptyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateAllocator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.End)
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Interval)
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateAllocatorResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAllocatorSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.End)
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Interval)
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetAllocationMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRemoveAllocator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSlowReleaseStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Interval)
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Strategy != nil {
		n += m.Strategy.Size()
	}
	return n
}

func (m *MsgCreateSlowReleaseStream_FixedAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FixedAmount)
	n += 1 + l + sovTx(uint64(l))
	return n
}
func (m *MsgPauseSlowReleaseStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Paused {
		n += 2
	}
	return n
}

func (m *MsgEditSlowReleaseStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Interval)
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Strategy != nil {
		n += m.Strategy.Size()
	}
	return n
}

func (m *MsgEditSlowReleaseStream_FixedAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FixedAmount)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgEmptyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEmptyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEmptyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAllocator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAllocator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAllocator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.End, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Interval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, Recipient{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAllocatorResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAllocatorResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAllocatorResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAllocatorSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAllocatorSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAllocatorSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.End, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Interval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetAllocationMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetAllocationMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetAllocationMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, Recipient{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAllocator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAllocator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAllocator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSlowReleaseStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSlowReleaseStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSlowReleaseStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Interval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = &MsgCreateSlowReleaseStream_FixedAmount{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseSlowReleaseStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseSlowReleaseStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseSlowReleaseStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditSlowReleaseStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditSlowReleaseStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditSlowReleaseStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Interval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = &MsgEditSlowReleaseStream_FixedAmount{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
